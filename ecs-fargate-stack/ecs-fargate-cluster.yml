AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack generates the resources for an ECS fargate stack"
Parameters:
  EcrRepoUri:  
    Description: Ecr Repo Uri from ecr-cfn-stack
    Type: String
  
  ImageSha:
    Description: Image tag required from EcrRepoUri for the Fargate container, example 'latest'
    Type: String

  ContainerPort:
    Description: The container port used by the application on our ImageTag, example '8000'
    Type: Number

  AppEnvSecret:
    Description: Secret key for the application
    Type: String

  SubnetId:
    Description: Subnet Id for the EcsService and Loadbalancer resource, we can either reference an existing aws subnet
    Type: String

  VpcId:
    Description: Vpc Id for the ip load balancer target group
    Type: String

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-fargate-cluster'
      CapacityProviders:
        - FARGATE
  
  EcsService: 
    Type: AWS::ECS::Service
    Properties: 
      Cluster: 
        !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-container 
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ElbTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # required to be ENABLED if subnet is public
          Subnets:
            - !Ref SubnetId
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId
      TaskDefinition: 
        !Ref EcsTaskDefinition
  
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      RequiresCompatibilities: 
        - FARGATE
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      ContainerDefinitions: 
        - Name: !Sub ${AWS::StackName}-container
          Image: !Join ['', [!Ref EcrRepoUri, '@', !Ref ImageSha]]
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          PortMappings: 
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: 'DJANGO_SECRET_KEY'
              Value: !Ref AppEnvSecret

  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: !Sub ${AWS::StackName}-loadbalancer
  #     Type: network
  #     Scheme: internet-facing
  #     Subnets:
  #       - !Ref SubnetId

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Sub ${AWS::StackName}-lb-tg
      VpcId: !Ref VpcId
      TargetType: ip
      Protocol: TCP
      Port: 8000

  ContainerLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${AWS::StackName}-logs
      RetentionInDays: 3

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-sg
      GroupDescription: !Sub "Security group for ${AWS::StackName} cloudformation stack"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  ecsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy # AmazonECSTaskExecutionRolePolicy
      # Policies:  # required if 'true' for awslogs-create-group under LogConfiguration/Options
      #   - PolicyName: awslogs 
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - logs:CreateLogGroup 
      #           Resource: "*"