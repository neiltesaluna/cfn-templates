AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack is to the lambda function which communicates with a S3 access point"

Parameters:
  s3BucketAccessPoint:
    Type: String
    Description: Access point Arn generated from s3 bucket stack

Resources:
  ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties: 
      Name: !Sub "${AWS::StackName}-cfn-object-lambda-access-point"
      ObjectLambdaConfiguration: 
        SupportingAccessPoint: !Ref s3BucketAccessPoint
        TransformationConfigurations:
          - Actions: 
             - GetObject
            ContentTransformation: 
              AwsLambda:
                FunctionArn: !GetAtt cfnAwsLambda.Arn
                FunctionPayload: 'test-payload'

  awsLambdaOLAccessRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "${AWS::StackName}-olap-role"
      Description: "Required IAM role for cfn lambda function"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:  
        - PolicyName: AmazonS3ObjectLambdaExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3-object-lambda:WriteGetObjectResponse
                Resource: "*"

  CWLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-Lambda"
      RetentionInDays: 3

  cfnAwsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-Lambda"
      Runtime: python3.9
      Role: !GetAtt awsLambdaOLAccessRole.Arn 
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import requests

          def lambda_handler(event, context):
              print(event)

              object_get_context = event["getObjectContext"]
              request_route = object_get_context["outputRoute"]
              request_token = object_get_context["outputToken"]
              s3_url = object_get_context["inputS3Url"]

              # Get object from S3
              response = requests.get(s3_url)
              original_object = response.content.decode('utf-8')

              # Transform object
              transformed_object = original_object.upper()

              # Write object back to S3 Object Lambda
              s3 = boto3.client('s3')
              s3.write_get_object_response(
                  Body=transformed_object,
                  RequestRoute=request_route,
                  RequestToken=request_token)

              return {'status_code': 200}